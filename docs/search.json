[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Data Processing and Visualization of Educational Enrollment Statistics",
    "section": "",
    "text": "This code block reads in the first CSV file, selects only the relevant columns (Area_name, STCOU, and columns ending in “D”), renames the Area_name column to area_name, and converts the data to long format. The mutate function is used to extract the year from the EDU column and create a measurement variable.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\nEDU &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", show_col_types = FALSE) |&gt;\n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n  rename(area_name = Area_name) |&gt;\n  pivot_longer(\n    cols = 3:12,   \n    names_to = \"EDU\",            \n    values_to = \"enrollment_value\"           \n  ) |&gt;\n  mutate(year = ifelse(as.numeric(substr(EDU, 8, 9)) &lt; 50, paste0(\"20\", substr(EDU, 8, 9)), paste0(\"19\", substr(EDU, 8, 9))),\n         measurement = substr(EDU, 1, 7))\n\nThis block filters the data to include only county-level data (rows where area_name contains a comma), extracts the state abbreviation, and assigns a new class county to the dataset.\n\nEDU_county &lt;- EDU |&gt;\n  filter(grepl(\",\", area_name)) |&gt;\n  mutate(state = substr(area_name, nchar(area_name) - 1, nchar(area_name)))\n\nclass(EDU_county) &lt;- c(\"county\", class(EDU_county))\n\nThese vectors define the states that belong to each of the nine divisions.\n\ndivision1 &lt;- c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\")\ndivision2 &lt;- c(\"New Jersey\", \"New York\", \"Pennsylvania\")\ndivision3 &lt;- c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\")\ndivision4 &lt;- c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\")\ndivision5 &lt;- c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"DISTRICT OF COLUMBIA\", \"West Virginia\")\ndivision6 &lt;- c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\")\ndivision7 &lt;- c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\")\ndivision8 &lt;- c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\")\ndivision9 &lt;- c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\")\n\nThis block filters the data to include only non-county-level data (rows where area_name does not contain a comma), assigns the appropriate division based on the area_name, and assigns a new class state to the dataset.\n\nEDU_noncounty &lt;- EDU |&gt;\n  filter(!grepl(\",\", area_name)) |&gt;\n  mutate(\n    division = ifelse(toupper(area_name) %in% toupper(division1), \"New England\",\n                      ifelse(toupper(area_name) %in% toupper(division2), \"Middle Atlantic\",\n                             ifelse(toupper(area_name) %in% toupper(division3), \"East North Central\",\n                                    ifelse(toupper(area_name) %in% toupper(division4), \"West North Central\",\n                                           ifelse(toupper(area_name) %in% toupper(division5), \"South Atlantic\",\n                                                  ifelse(toupper(area_name) %in% toupper(division6), \"East South Central\",\n                                                         ifelse(toupper(area_name) %in% toupper(division7), \"West South Central\",\n                                                                ifelse(toupper(area_name) %in% toupper(division8), \"Mountain\",\n                                                                       ifelse(toupper(area_name) %in% toupper(division9), \"Pacific\",\n                                                                              \"ERROR\")))))))))\n  )\n\nclass(EDU_noncounty) &lt;- c(\"state\", class(EDU_noncounty))"
  },
  {
    "objectID": "Project1.html#data-processing",
    "href": "Project1.html#data-processing",
    "title": "Data Processing and Visualization of Educational Enrollment Statistics",
    "section": "",
    "text": "This code block reads in the first CSV file, selects only the relevant columns (Area_name, STCOU, and columns ending in “D”), renames the Area_name column to area_name, and converts the data to long format. The mutate function is used to extract the year from the EDU column and create a measurement variable.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\nEDU &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", show_col_types = FALSE) |&gt;\n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n  rename(area_name = Area_name) |&gt;\n  pivot_longer(\n    cols = 3:12,   \n    names_to = \"EDU\",            \n    values_to = \"enrollment_value\"           \n  ) |&gt;\n  mutate(year = ifelse(as.numeric(substr(EDU, 8, 9)) &lt; 50, paste0(\"20\", substr(EDU, 8, 9)), paste0(\"19\", substr(EDU, 8, 9))),\n         measurement = substr(EDU, 1, 7))\n\nThis block filters the data to include only county-level data (rows where area_name contains a comma), extracts the state abbreviation, and assigns a new class county to the dataset.\n\nEDU_county &lt;- EDU |&gt;\n  filter(grepl(\",\", area_name)) |&gt;\n  mutate(state = substr(area_name, nchar(area_name) - 1, nchar(area_name)))\n\nclass(EDU_county) &lt;- c(\"county\", class(EDU_county))\n\nThese vectors define the states that belong to each of the nine divisions.\n\ndivision1 &lt;- c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\")\ndivision2 &lt;- c(\"New Jersey\", \"New York\", \"Pennsylvania\")\ndivision3 &lt;- c(\"Illinois\", \"Indiana\", \"Michigan\", \"Ohio\", \"Wisconsin\")\ndivision4 &lt;- c(\"Iowa\", \"Kansas\", \"Minnesota\", \"Missouri\", \"Nebraska\", \"North Dakota\", \"South Dakota\")\ndivision5 &lt;- c(\"Delaware\", \"Florida\", \"Georgia\", \"Maryland\", \"North Carolina\", \"South Carolina\", \"Virginia\", \"DISTRICT OF COLUMBIA\", \"West Virginia\")\ndivision6 &lt;- c(\"Alabama\", \"Kentucky\", \"Mississippi\", \"Tennessee\")\ndivision7 &lt;- c(\"Arkansas\", \"Louisiana\", \"Oklahoma\", \"Texas\")\ndivision8 &lt;- c(\"Arizona\", \"Colorado\", \"Idaho\", \"Montana\", \"Nevada\", \"New Mexico\", \"Utah\", \"Wyoming\")\ndivision9 &lt;- c(\"Alaska\", \"California\", \"Hawaii\", \"Oregon\", \"Washington\")\n\nThis block filters the data to include only non-county-level data (rows where area_name does not contain a comma), assigns the appropriate division based on the area_name, and assigns a new class state to the dataset.\n\nEDU_noncounty &lt;- EDU |&gt;\n  filter(!grepl(\",\", area_name)) |&gt;\n  mutate(\n    division = ifelse(toupper(area_name) %in% toupper(division1), \"New England\",\n                      ifelse(toupper(area_name) %in% toupper(division2), \"Middle Atlantic\",\n                             ifelse(toupper(area_name) %in% toupper(division3), \"East North Central\",\n                                    ifelse(toupper(area_name) %in% toupper(division4), \"West North Central\",\n                                           ifelse(toupper(area_name) %in% toupper(division5), \"South Atlantic\",\n                                                  ifelse(toupper(area_name) %in% toupper(division6), \"East South Central\",\n                                                         ifelse(toupper(area_name) %in% toupper(division7), \"West South Central\",\n                                                                ifelse(toupper(area_name) %in% toupper(division8), \"Mountain\",\n                                                                       ifelse(toupper(area_name) %in% toupper(division9), \"Pacific\",\n                                                                              \"ERROR\")))))))))\n  )\n\nclass(EDU_noncounty) &lt;- c(\"state\", class(EDU_noncounty))"
  },
  {
    "objectID": "Project1.html#writing-a-generic-function-for-summarizing",
    "href": "Project1.html#writing-a-generic-function-for-summarizing",
    "title": "Data Processing and Visualization of Educational Enrollment Statistics",
    "section": "Writing a Generic Function for Summarizing",
    "text": "Writing a Generic Function for Summarizing\nWe define two custom plot functions, one for state-level data and one for county-level data. The plot.state function takes a state-level dataframe, filters out rows with “ERROR” in the division, calculates the mean enrollment value for each division and year, and creates a bar plot using ggplot2.\n\nplot.state &lt;- function(df){\n  df1 &lt;- df |&gt;\n    filter(division != \"ERROR\") |&gt;\n    mutate(divisionf = as.factor(division))\n \n  summary_df &lt;- df1 |&gt;\n    group_by(year, divisionf) |&gt;\n    mutate(mean_value = mean(enrollment_value, na.rm = TRUE)) |&gt;\n    ungroup()\n \n  ggplot(data = summary_df, aes(x = year, y = mean_value, fill = divisionf)) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}\n\nplot.state(EDU_noncounty)\n\n\n\n\n\n\n\n\nThe plot.county function takes a county-level dataframe, filters the data for the specified state, calculates the mean enrollment value for each county, and creates a bar plot for the top and bottom m counties by mean enrollment value.\n\nplot.county &lt;- function(df, state_re = \"NC\", m = 5){\n  df1 &lt;- df |&gt;\n    filter(state == state_re) |&gt;\n    group_by(area_name) |&gt;\n    mutate(mean_value = mean(enrollment_value, na.rm = TRUE)) |&gt;\n    arrange(mean_value) |&gt;\n    select(area_name, mean_value) |&gt;\n    distinct() |&gt;\n    ungroup()\n\n  df1f &lt;- df1 |&gt;\n    slice_head(n = m)\n    \n  df1l &lt;- df1 |&gt;\n    slice_tail(n = m) \n  \n  df2 &lt;- bind_rows(df1f, df1l)\n\n  ggplot(data = df2, aes(x = area_name, y = mean_value)) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}\n\nplot.county(EDU_county, \"AL\", 2)"
  },
  {
    "objectID": "Project1.html#data-processing-function",
    "href": "Project1.html#data-processing-function",
    "title": "Data Processing and Visualization of Educational Enrollment Statistics",
    "section": "Data Processing Function",
    "text": "Data Processing Function\nWe define functions to automate the steps for reading and processing the datasets. These functions read and process the data, splitting it into county and non-county data frames, and assigning appropriate classes.\n\nprocess_data &lt;- function(url, value_col = \"enrollment_value\"){\n  data &lt;- read_csv(url, show_col_types = FALSE) |&gt;\n    select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n    rename(area_name = Area_name) |&gt;\n    pivot_longer(\n      cols = 3:12,\n      names_to = \"EDU\",\n      values_to = value_col\n    ) |&gt;\n    mutate(year = ifelse(as.numeric(substr(EDU, 8, 9)) &lt; 50, paste0(\"20\", substr(EDU, 8, 9)), paste0(\"19\", substr(EDU, 8, 9))),\n           measurement = substr(EDU, 1, 7))\n  return(data)\n}\n\nprocess_noncounty &lt;- function(df){\n  df &lt;- df |&gt;\n    filter(!grepl(\",\", area_name)) |&gt;\n    mutate(\n      division = ifelse(toupper(area_name) %in% toupper(division1), \"New England\",\n                        ifelse(toupper(area_name) %in% toupper(division2), \"Middle Atlantic\",\n                               ifelse(toupper(area_name) %in% toupper(division3), \"East North Central\",\n                                      ifelse(toupper(area_name) %in% toupper(division4), \"West North Central\",\n                                             ifelse(toupper(area_name) %in% toupper(division5), \"South Atlantic\",\n                                                    ifelse(toupper(area_name) %in% toupper(division6), \"East South Central\",\n                                                           ifelse(toupper(area_name) %in% toupper(division7), \"West South Central\",\n                                                                  ifelse(toupper(area_name) %in% toupper(division8), \"Mountain\",\n                                                                         ifelse(toupper(area_name) %in% toupper(division9), \"Pacific\",\n                                                                                \"ERROR\")))))))))\n    )\n  class(df) &lt;- c(\"state\", class(df))\n  return(df)\n}\n\nprocess_county &lt;- function(df){\n  df &lt;- df |&gt;\n    filter(grepl(\",\", area_name)) |&gt;\n    mutate(state = substr(area_name, nchar(area_name)\n\n - 1, nchar(area_name)))\n  class(df) &lt;- c(\"county\", class(df))\n  return(df)\n}"
  },
  {
    "objectID": "Project1.html#wrapper-function",
    "href": "Project1.html#wrapper-function",
    "title": "Data Processing and Visualization of Educational Enrollment Statistics",
    "section": "Wrapper Function",
    "text": "Wrapper Function\nA wrapper function combines the previous functions to process and combine datasets.\n\nwrapper_function &lt;- function(url, value_col = \"enrollment_value\"){\n  data &lt;- process_data(url, value_col)\n  county_data &lt;- process_county(data)\n  noncounty_data &lt;- process_noncounty(data)\n  return(list(county = county_data, noncounty = noncounty_data))\n}\n\ncombine_data &lt;- function(data1, data2){\n  combined_county &lt;- bind_rows(data1$county, data2$county)\n  combined_noncounty &lt;- bind_rows(data1$noncounty, data2$noncounty)\n  return(list(county = combined_county, noncounty = combined_noncounty))\n}\n\nThe wrapper_function processes a given URL, while combine_data combines the results from multiple calls to the wrapper function."
  },
  {
    "objectID": "Project1.html#putting-it-all-together",
    "href": "Project1.html#putting-it-all-together",
    "title": "Data Processing and Visualization of Educational Enrollment Statistics",
    "section": "Putting It All Together",
    "text": "Putting It All Together\nWe apply the wrapper function to the given datasets and combine them. We call the processing and combining functions for the two datasets, and then use the custom plot functions to visualize the results.\n\ndata1 &lt;- wrapper_function(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\ndata2 &lt;- wrapper_function(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\ncombined_data &lt;- combine_data(data1, data2)\n\n# Use the plot function on the state data frame\nplot.state(combined_data$noncounty)\n\n\n\n\n\n\n\n# Use the plot function on the county data frame\nplot.county(combined_data$county, \"NC\", 20)\n\n\n\n\n\n\n\nplot.county(combined_data$county, \"SC\", 7)\n\n\n\n\n\n\n\nplot.county(combined_data$county)\n\n\n\n\n\n\n\nplot.county(combined_data$county, \"PA\", 8)"
  },
  {
    "objectID": "Project1.html#additional-data-processing",
    "href": "Project1.html#additional-data-processing",
    "title": "Data Processing and Visualization of Educational Enrollment Statistics",
    "section": "Additional Data Processing",
    "text": "Additional Data Processing\nWe apply the process to additional datasets.\n\ndata3 &lt;- wrapper_function(\"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\")\ndata4 &lt;- wrapper_function(\"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\")\ndata5 &lt;- wrapper_function(\"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\")\ndata6 &lt;- wrapper_function(\"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\")\n\ncombined_data2 &lt;- combine_data(data3, data4)\ncombined_data3 &lt;- combine_data(data5, data6)\n\n# Use the plot function on the state data frame\nplot.state(combined_data2$noncounty)\n\n\n\n\n\n\n\nplot.state(combined_data3$noncounty)\n\n\n\n\n\n\n\n# Use the plot function on the county data frame\nplot.county(combined_data2$county, \"CA\", 15)\n\n\n\n\n\n\n\nplot.county(combined_data2$county, \"TX\", 4)\n\n\n\n\n\n\n\nplot.county(combined_data2$county)\n\n\n\n\n\n\n\nplot.county(combined_data2$county, \"NY\", 10)"
  }
]